

Print '>> Loading table to the silver layer from the crm source system';

Print '>> Inserting Data Into: silver.crm_cust_info';

--CUSTOMER INFO LOAD INTO SILVER LAYER
--Check for Nulls or Duplicates in Primary KEY
--Expectation: No Results
--1.
select cst_id, 
count(*)
FROM bronze.crm_cust_info
Group by cst_id 
having count(*)>1 or cst_id IS NULL

--Resolved
-- check for unique primary key, data filtering
SELECT * 
FROM(

SELECT
* ,
--Row_number() assigns a unique number to each row in a result set, based on a defined order
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
)t
where flag_last= 1  and cst_id  is not null
--where flag_last= 1 -- this selects the date we need
-- where flag_last != 1 -- this selects the date we do not need
--where flag_last= 1  and cst_id  is not null -- this selects the date we need

-- Check Quality, check for unwanted spaces in string values

--check for unwanted spaces
--expectation: No results
select cst_firstname
from bronze.crm_cust_info
where cst_firstname != trim(cst_lastname) --trim() removes leaading and trailing spaces from a string

--resolved
select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need


--Quality Check
--Check the consistency of values in low cardinality columns


--Data standardization & consistency and normalization

select distinct cst_gndr
from bronze.crm_cust_info

--wite gender and marital status in full
select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status))='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status))='S' THEN 'Single'
     Else 'n/a'
	 END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
     Else 'n/a'
	 END cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need

--finally insert into the silver table
  
Print '>> Truncating Table:silver.crm_cust_info';
Truncate Table silver.crm_cust_info
Print '>> Inserting Data Into: silver.crm_cust_info';
Insert into silver.crm_cust_info(
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
)

select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status))='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status))='S' THEN 'Single'
     Else 'n/a'
	 END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
     Else 'n/a'
	 END cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need

--finally check the table
select * from silver.crm_cust_info



Print '>> Inserting Data Into: silver.crm_prd_info';

--Check for Nulls or Duplicates in Primary KEY
--Expectation: No Results
--1. check the primary key whether there are dublicates or nulls
select prd_id, 
count(*)
FROM bronze.crm_prd_info
Group by prd_id 
having count(*)>1 or prd_id IS NULL


--2 spliting one columns into two columns
SELECT  [prd_id]
      ,[prd_key]
      , SUBSTRING(prd_key,1,5) AS cat_id -- substring()extracts specific part of a string value
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

--verifying
select distinct id from bronze.erp_px_cat_g1v2
--since the id is underscore we may have to replace the the minus sign to underscore

SELECT  [prd_id]
      ,[prd_key]
      ,replace( SUBSTRING(prd_key,1,5),'-','_') AS cat_id -- substring()extracts specific part of a string value
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

-- now let check if there is ny unmatch id which is in cat_id
SELECT  [prd_id]
      ,[prd_key]
      ,replace( SUBSTRING(prd_key,1,5),'-','_') AS cat_id -- substring()extracts specific part of a string value
      ,[prd_cost]
      ,[prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]
  where replace( SUBSTRING(prd_key,1,5),'-','_') NOT IN 
  (select distinct id from bronze.erp_px_cat_g1v2)

-- now lt extract the second part
SELECT  [prd_id]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key
	  ,[prd_cost]
      ,[prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

  --check for unwanted spaces in the prd_nm
  --Expectation: Noresults
  select prd_nm
from [Bronze].[crm_prd_info]
where prd_nm != trim(prd_nm)
-- There are no spaces


--check for nulls or negative numbers
--Expectation: Noresults
  select prd_cost
from [Bronze].[crm_prd_info]
where prd_cost<0 or prd_cost is null
-- There nulls so we resolve in next line


--Resolved
SELECT  [prd_id]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key
      ,isnull (prd_cost,0) AS prd_cost,
	    prd_nm,
	  [prd_line]
      ,[prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

--Data standardization & Consistency
select distinct prd_line
from bronze.crm_prd_info
--there are nulls so we resolve it next line

--resolved
SELECT  [prd_id]
      ,[prd_key]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key
      ,isnull (prd_cost,0) AS prd_cost,
	    prd_nm,
       CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Mountain'
	         WHEN 'R' THEN 'Road'
			 WHEN 'S' THEN 'Other Sales'
			 WHEN 'T' THEN 'Touring'
			 Else 'n/a'
	END AS prd_line,
	  [prd_start_dt]
      ,[prd_end_dt]
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

  -- check for invalid date orders
  select* 
  from bronze.crm_prd_info
  where prd_end_dt<prd_start_dt
  --some start dates are greater tha end date

--resolved, basically switch the two dates over
--lead() access values from the next row within a window
--resolved
SELECT  [prd_id]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key
      ,isnull (prd_cost,0) AS prd_cost,
	    prd_nm,
       CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Mountain'
	         WHEN 'R' THEN 'Road'
			 WHEN 'S' THEN 'Other Sales'
			 WHEN 'T' THEN 'Touring'
			 Else 'n/a'
	END AS prd_line,
	CAST(prd_start_dt AS DATE) AS prd_start_dt,
	  lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)-1 as prd_end_dt
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

  --finally insert into the silver layer
  
Print '>> Truncating Table:silver.crm_prd_info';
Truncate Table silver.crm_prd_info
Print '>> Inserting Data Into: silver.crm_prd_info';
insert into silver.crm_prd_info(
  prd_id,
  cat_id,
  prd_key,
  prd_nm,
  prd_cost,
  prd_line,
  prd_start_dt,
  prd_end_dt
  )
  SELECT  [prd_id]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key,
	  prd_nm,
      isnull (prd_cost,0) AS prd_cost,
       CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Mountain'
	         WHEN 'R' THEN 'Road'
			 WHEN 'S' THEN 'Other Sales'
			 WHEN 'T' THEN 'Touring'
			 Else 'n/a'
	END AS prd_line,
	CAST(prd_start_dt AS DATE) AS prd_start_dt,
	  lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)-1 as prd_end_dt
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

  --have a final look at the silver table
  select * 
  from silver.crm_prd_info


Print '>> Inserting Data Into: silver.crm_sales_details';
  
select
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales_dt,
	sls_quantity,
	sls_price
from  bronze.crm_sales_details

  --check for unwanted spaces in the prd_nm
  --Expectation: Noresults
  select sls_ord_num
from [Bronze].crm_sales_details
where sls_ord_num != trim(sls_ord_num)
-- There are no spaces

--check whether the product key from the prd_info is in the sales details
  select sls_prd_key
from [Bronze].crm_sales_details
where sls_prd_key NOT IN (select prd_key FROM silver.crm_prd_info)
--No issues

--check whether the cust_id from the prd_info is in customer info
  select sls_cust_id
from [Bronze].crm_sales_details
where sls_cust_id NOT IN (select cst_id FROM silver.crm_cust_info)
--No issues

--check for invalid dates
select 
sls_order_dt
from bronze.crm_sales_details
where sls_order_dt<=0
--replace all zeros with null using nullif()
--nullif() returns null if two given values are equal; otherwise, it returns the first expression.

--resolved
select 
NULLIF(sls_order_dt,0)sls_order_dt
from bronze.crm_sales_details
where sls_order_dt<=0 or 
len(sls_order_dt)!=8 or 
sls_order_dt>20500101 or
sls_order_dt<19000101

--let resolve that in our main query


select
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	case when sls_order_dt=0 or len(sls_order_dt) !=8 then null
	else cast(cast(sls_order_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_order_dt,
		case when sls_ship_dt=0 or len(sls_ship_dt) !=8 then null
	else cast(cast(sls_ship_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_ship_dt,
	case when sls_due_dt=0 or len(sls_due_dt) !=8 then null
	else cast(cast(sls_due_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_due_dt,
	sls_sales_dt,
	sls_quantity,
	sls_price
from  bronze.crm_sales_details


--check for invalid date orders
select * from bronze.crm_sales_details
where sls_order_dt>sls_ship_dt or sls_order_dt>sls_due_dt
--no issues

--check Data consistency: between sales, quantity, and price
-->> sales = quantity * price
-->> values must not be NULL, zero, or negative.

select distinct
sls_sales_dt as old_sls_sales,
sls_quantity,
sls_price as old_sls_price,
case when sls_sales_dt is null or sls_sales_dt<=0 or sls_sales_dt != sls_quantity * ABS(sls_price)
--ABS() Converts negative to positive is called absolute.
then sls_quantity * ABS(sls_price)
else sls_sales_dt
end as sls_sales_dt,
case when sls_price is null or sls_price<=0
then sls_sales_dt/nullif(sls_quantity,0)--if you get any zero replace with null
else sls_price
end as sls_price
from bronze.crm_sales_details
where sls_sales_dt !=sls_quantity* sls_price
or sls_sales_dt is null or sls_quantity is null  or sls_price is null
or sls_sales_dt <=0 or sls_quantity<=0 or sls_price<=0
order by sls_sales_dt, sls_quantity, sls_price


--let resolve that in our main query


select
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	case when sls_order_dt=0 or len(sls_order_dt) !=8 then null
	else cast(cast(sls_order_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_order_dt,
		case when sls_ship_dt=0 or len(sls_ship_dt) !=8 then null
	else cast(cast(sls_ship_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_ship_dt,
	case when sls_due_dt=0 or len(sls_due_dt) !=8 then null
	else cast(cast(sls_due_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_due_dt,
	case when sls_sales_dt is null or sls_sales_dt<=0 or sls_sales_dt != sls_quantity * ABS(sls_price)
--ABS() Converts negative to positive is called absolute.
then sls_quantity * ABS(sls_price)
else sls_sales_dt
end as sls_sales_dt,
	sls_quantity,
case when sls_price is null or sls_price<=0
then sls_sales_dt/nullif(sls_quantity,0)--if you get any zero replace with null
else sls_price
end as sls_price
from  bronze.crm_sales_details

--Finally let insert the data into the silver layer
Print '>> Truncating Table:silver.crm_sales_details';
Truncate Table silver.crm_sales_details
Print '>> Inserting Data Into: silver.crm_sales_details';
insert into silver.crm_sales_details(
sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	 sls_sales_dt,
	sls_quantity,
	sls_price)

select
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	case when sls_order_dt=0 or len(sls_order_dt) !=8 then null
	else cast(cast(sls_order_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_order_dt,
		case when sls_ship_dt=0 or len(sls_ship_dt) !=8 then null
	else cast(cast(sls_ship_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_ship_dt,
	case when sls_due_dt=0 or len(sls_due_dt) !=8 then null
	else cast(cast(sls_due_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_due_dt,
	case when sls_sales_dt is null or sls_sales_dt<=0 or sls_sales_dt != sls_quantity * ABS(sls_price)
--ABS() Converts negative to positive is called absolute.
then sls_quantity * ABS(sls_price)
else sls_sales_dt
end as sls_sales_dt,
	sls_quantity,
case when sls_price is null or sls_price<=0
then sls_sales_dt/nullif(sls_quantity,0)--if you get any zero replace with null
else sls_price
end as sls_price
from  bronze.crm_sales_details

--have a final check
select * from bronze.crm_sales_details







Print '>> Loading table to the silver layer from the erp source system';

Print '>> Inserting Data Into: silver.erp_cust_az12';

-- erp_cust_az12
select
cid,
bdate,
gen
from bronze.erp_cust_az12 

--we need to remove NAS from the cid so as to help us join the table with other tables

select
case when cid like 'NAS%' THEN SUBSTRING(cid,4,len(cid))
else cid
end as cid,
bdate,
gen
from bronze.erp_cust_az12 

--check and identify out of date ranges dates
select distinct
bdate
from bronze.erp_cust_az12
where bdate < '1924-01-01' or bdate > getdate()--getdate() means current date
-- it appears there are errors in the dates

--resolved

select
case when cid like 'NAS%' THEN SUBSTRING(cid,4,len(cid))
else cid
end as cid,
case when bdate > getdate() then null
else bdate
end as bdate,
gen
from bronze.erp_cust_az12 

--standardization & normalization
select distinct
gen,
case when upper(trim(gen)) in ('F', 'FEMALE')  THEN 'Female'
 when upper(trim(gen)) in ('M', 'MALE')  THEN 'Male'
else 'n/a'
end as gen
from bronze.erp_cust_az12 

--resolved

select
case when cid like 'NAS%' THEN SUBSTRING(cid,4,len(cid))
else cid
end as cid,
case when bdate > getdate() then null
else bdate
end as bdate,
case when upper(trim(gen)) in ('F', 'FEMALE')  THEN 'Female'
 when upper(trim(gen)) in ('M', 'MALE')  THEN 'Male'
else 'n/a'
end as gen
from bronze.erp_cust_az12 

--finally insert into the silver layer

Print '>> Truncating Table:silver.erp_cust_az12';
Truncate Table silver.erp_cust_az12
Print '>> Inserting Data Into: silver.erp_cust_az12';
insert into silver.erp_cust_az12(
cid,
bdate,
gen
)
select
case when cid like 'NAS%' THEN SUBSTRING(cid,4,len(cid))
else cid
end as cid,
case when bdate > getdate() then null
else bdate
end as bdate,
case when upper(trim(gen)) in ('F', 'FEMALE')  THEN 'Female'
 when upper(trim(gen)) in ('M', 'MALE')  THEN 'Male'
else 'n/a'
end as gen
from bronze.erp_cust_az12 



Print '>> Inserting Data Into: silver.erp_loc_a101';
-- erp_loc_a101

select 
cid,
cntry
from bronze.erp_loc_a101

--we need to remove the dash sign from the cid so as to be able to join it with other tables

--resolved

select 
replace(cid, '-', '') cid,
cntry
from bronze.erp_loc_a101


--checking
select 
replace(cid, '-', '') cid,
cntry
from bronze.erp_loc_a101
where replace(cid, '-', ' ') not in
(select cst_key from silver.crm_cust_info)

--checking for distinct countries
select distinct
cntry
from bronze.erp_loc_a101

--resolved
select 
replace(cid, '-', '') cid,
case when trim(cntry)='DE' THEN'Germany'
	 when trim(cntry) IN ('US' ,'USA') THEN 'United States'
	 WHEN TRIM(cntry) ='' OR cntry is null then 'n/a'
	 else trim(cntry)
end as cntry
from bronze.erp_loc_a101

--finally insert it into the silver layer
Print '>> Truncating Table:silver.erp_loc_a101';
Truncate Table silver.erp_loc_a101
Print '>> Inserting Data Into: silver.erp_loc_a101';
insert into silver.erp_loc_a101(
cid,
cntry
)
select 
replace(cid, '-', '') cid,
case when trim(cntry)='DE' THEN'Germany'
	 when trim(cntry) IN ('US' ,'USA') THEN 'United States'
	 WHEN TRIM(cntry) ='' OR cntry is null then 'n/a'
	 else trim(cntry)
end as cntry
from bronze.erp_loc_a101




Print '>> Inserting Data Into: silver.erp_px_cat_g1v2';
--erp_px_cat_g1v2

select
id,
cat,
subcat,
maintainance
from bronze.erp_px_cat_g1v2

--there are no issues in this so we go ahead and insert
--finally insert into the silver layer

Print '>> Truncating Table:silver.erp_px_cat_g1v2';
Truncate Table silver.erp_px_cat_g1v2
Print '>> Inserting Data Into: silver.erp_px_cat_g1v2';
insert into silver.erp_px_cat_g1v2(
id,
cat,
subcat,
maintainance)

select
id,
cat,
subcat,
maintainance
from bronze.erp_px_cat_g1v2
