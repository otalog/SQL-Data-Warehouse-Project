Exec silver.load_silver
create or alter procedure silver.load_silver as
Begin
Print '>> Inserting Data Into: silver.crm_cust_info';

--finally insert into the silver table

  
Print '>> Truncating Table:silver.crm_cust_info';
Truncate Table silver.crm_cust_info
Print '>> Inserting Data Into: silver.crm_cust_info';
Insert into silver.crm_cust_info(
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
)

select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status))='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status))='S' THEN 'Single'
     Else 'n/a'
	 END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
     Else 'n/a'
	 END cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need

--finally check the table
--select * from silver.crm_cust_info



Print '>> Inserting Data Into: silver.crm_prd_info';

  --finally insert into the silver layer
  
Print '>> Truncating Table:silver.crm_prd_info';
Truncate Table silver.crm_prd_info
Print '>> Inserting Data Into: silver.crm_prd_info';
insert into silver.crm_prd_info(
  prd_id,
  cat_id,
  prd_key,
  prd_nm,
  prd_cost,
  prd_line,
  prd_start_dt,
  prd_end_dt
  )
  SELECT  [prd_id]
      , SUBSTRING(prd_key,1,5) AS cat_id, -- substring()extracts specific part of a string value
      substring(prd_key,7, len(prd_key)) as prd_key,
	  prd_nm,
      isnull (prd_cost,0) AS prd_cost,
       CASE UPPER(TRIM(prd_line))
			WHEN 'M' THEN 'Mountain'
	         WHEN 'R' THEN 'Road'
			 WHEN 'S' THEN 'Other Sales'
			 WHEN 'T' THEN 'Touring'
			 Else 'n/a'
	END AS prd_line,
	CAST(prd_start_dt AS DATE) AS prd_start_dt,
	  lead(prd_start_dt) over (partition by prd_key order by prd_start_dt)-1 as prd_end_dt
  FROM [DataWarehouse].[Bronze].[crm_prd_info]

  --have a final look at the silver table
  --select * from silver.crm_prd_info


Print '>> Inserting Data Into: silver.crm_sales_details';
  

--Finally let insert the data into the silver layer
Print '>> Truncating Table:silver.crm_sales_details';
Truncate Table silver.crm_sales_details
Print '>> Inserting Data Into: silver.crm_sales_details';
insert into silver.crm_sales_details(
sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	 sls_sales_dt,
	sls_quantity,
	sls_price)

select
	sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	case when sls_order_dt=0 or len(sls_order_dt) !=8 then null
	else cast(cast(sls_order_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_order_dt,
		case when sls_ship_dt=0 or len(sls_ship_dt) !=8 then null
	else cast(cast(sls_ship_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_ship_dt,
	case when sls_due_dt=0 or len(sls_due_dt) !=8 then null
	else cast(cast(sls_due_dt AS VARCHAR)AS DATE)-- in sql cast to varchar before casting to date
	END AS sls_due_dt,
	case when sls_sales_dt is null or sls_sales_dt<=0 or sls_sales_dt != sls_quantity * ABS(sls_price)
--ABS() Converts negative to positive is called absolute.
then sls_quantity * ABS(sls_price)
else sls_sales_dt
end as sls_sales_dt,
	sls_quantity,
case when sls_price is null or sls_price<=0
then sls_sales_dt/nullif(sls_quantity,0)--if you get any zero replace with null
else sls_price
end as sls_price
from  bronze.crm_sales_details

--have a final check
--select * from bronze.crm_sales_details







Print '>> Loading table to the silver layer from the erp source system';

Print '>> Inserting Data Into: silver.erp_cust_az12';


--finally insert into the silver layer

Print '>> Truncating Table:silver.erp_cust_az12';
Truncate Table silver.erp_cust_az12
Print '>> Inserting Data Into: silver.erp_cust_az12';
insert into silver.erp_cust_az12(
cid,
bdate,
gen
)
select
case when cid like 'NAS%' THEN SUBSTRING(cid,4,len(cid))
else cid
end as cid,
case when bdate > getdate() then null
else bdate
end as bdate,
case when upper(trim(gen)) in ('F', 'FEMALE')  THEN 'Female'
 when upper(trim(gen)) in ('M', 'MALE')  THEN 'Male'
else 'n/a'
end as gen
from bronze.erp_cust_az12 



Print '>> Inserting Data Into: silver.erp_loc_a101';
-- erp_loc_a101

--finally insert it into the silver layer
Print '>> Truncating Table:silver.erp_loc_a101';
Truncate Table silver.erp_loc_a101
Print '>> Inserting Data Into: silver.erp_loc_a101';
insert into silver.erp_loc_a101(
cid,
cntry
)
select 
replace(cid, '-', '') cid,
case when trim(cntry)='DE' THEN'Germany'
	 when trim(cntry) IN ('US' ,'USA') THEN 'United States'
	 WHEN TRIM(cntry) ='' OR cntry is null then 'n/a'
	 else trim(cntry)
end as cntry
from bronze.erp_loc_a101



Print '>> Inserting Data Into: silver.erp_px_cat_g1v2';
--erp_px_cat_g1v2
--there are no issues in this so we go ahead and insert
--finally insert into the silver layer

Print '>> Truncating Table:silver.erp_px_cat_g1v2';
Truncate Table silver.erp_px_cat_g1v2
Print '>> Inserting Data Into: silver.erp_px_cat_g1v2';
insert into silver.erp_px_cat_g1v2(
id,
cat,
subcat,
maintainance)

select
id,
cat,
subcat,
maintainance
from bronze.erp_px_cat_g1v2
end
