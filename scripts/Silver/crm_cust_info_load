--Check for Nulls or Duplicates in Primary KEY
--Expectation: No Results
--1.
select cst_id, 
count(*)
FROM bronze.crm_cust_info
Group by cst_id 
having count(*)>1 or cst_id IS NULL

--Resolved
-- check for unique primary key, data filtering
SELECT * 
FROM(

SELECT
* ,
--Row_number() assigns a unique number to each row in a result set, based on a defined order
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
)t
where flag_last= 1  and cst_id  is not null
--where flag_last= 1 -- this selects the date we need
-- where flag_last != 1 -- this selects the date we do not need
--where flag_last= 1  and cst_id  is not null -- this selects the date we need

-- Check Quality, check for unwanted spaces in string values

--check for unwanted spaces
--expectation: No results
select cst_firstname
from bronze.crm_cust_info
where cst_firstname != trim(cst_lastname) --trim() removes leaading and trailing spaces from a string

--resolved
select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need


--Quality Check
--Check the consistency of values in low cardinality columns


--Data standardization & consistency and normalization

select distinct cst_gndr
from bronze.crm_cust_info

--wite gender and marital status in full
select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status))='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status))='S' THEN 'Single'
     Else 'n/a'
	 END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
     Else 'n/a'
	 END cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need

--finally insert into the silver table

Insert into silver.crm_cust_info(
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_material_status,
cst_gndr,
cst_create_date
)

select
cst_id,
cst_key,
trim(cst_firstname) AS cst_firstname,
trim(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_material_status))='M' THEN 'Married'
     WHEN UPPER(TRIM(cst_material_status))='S' THEN 'Single'
     Else 'n/a'
	 END cst_material_status,
CASE WHEN UPPER(TRIM(cst_gndr))='F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr))='M' THEN 'Male'
     Else 'n/a'
	 END cst_gndr,
cst_create_date
from (
select *,
Row_Number() over (partition BY cst_id Order BY cst_create_date DESC) as flag_last
FROM bronze.crm_cust_info
where cst_id is not null
)t
where flag_last= 1 -- this selects the date we need

--finally check the table
select * from silver.crm_cust_info
